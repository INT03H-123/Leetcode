62.不同路径I
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
问总共有多少条不同的路径？

示例 1:
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

示例 2:
输入: m = 7, n = 3
输出: 28

思路：动态规划来表示到达每个位置一共有多少条路径，题目要求只能向右向下移动，故第一行和第一列的所有位置都只有一条路径，其他位置的路径数等于左边位置路径数+上边位置路径数

class Solution {
public:
    int uniquePaths(int m, int n) 
    {
        int dp[m][n];//动态规划 表示到达该位置一共有几条路径
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(i==0 || j==0) 
                {
                   dp[i][j]=1; //第一行第一列各位置只有一条路径
                   continue;
                }
                dp[i][j]=dp[i-1][j]+dp[i][j-1];//其他行列元素处理
            }
        }
        return dp[m-1][n-1];
    }
};

63.不同路径II
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
网格中的障碍物和空位置分别用 1 和 0 来表示。
说明：m 和 n 的值均不超过 100。

示例 1:
输入:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
输出: 2
解释:
3x3 网格的正中间有一个障碍物。
从左上角到右下角一共有 2 条不同的路径：
1. 向右 -> 向右 -> 向下 -> 向下
2. 向下 -> 向下 -> 向右 -> 向右

思路：同62题相似，先处理第一行和第一列的位置，若第一行（列）有一位置有障碍，则其后面的位置路径数均为0，无法到达；在计算其他位置时，先按照62中的路径数计算到达该位置的路径，然后查看该位置是否为障碍，如果是则将该位置的路径数置0，以免影响后续计算。
class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        if(obstacleGrid[0][0]==1) return 0;
        int row=obstacleGrid.size();
        int col=obstacleGrid[0].size();
        vector<vector<int>> dp(row,vector<int>(col));//动态规划表示到达这个位置的路径总数
        dp[0][0]=1;
        //处理第一行
        for(int i=1;i<col;i++)
        {
            if(obstacleGrid[0][i]==1) dp[0][i]=0;
            else dp[0][i]=dp[0][i-1];
        }
        //处理第一列
        for(int i=1;i<row;i++)
        {
            if(obstacleGrid[i][0]==1) dp[i][0]=0;
            else dp[i][0]=dp[i-1][0];
        }
        for(int i=1;i<row;i++)
        {
            for(int j=1;j<col;j++)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
                if(obstacleGrid[i][j]==1) dp[i][j]=0;
            }
        }
        return dp[row-1][col-1];
    }
};

