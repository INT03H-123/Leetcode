给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。
说明：每次只能向下或者向右移动一步。

示例:
输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。

思路：题目要求只能向左或向右，都该先处理第一行（列），因为他们中的各位置只有一条路径，动态规划是路径最小和，第一列和第一行的位置该值是固定的，其他位置是其min（左边位置路径最小和，上面位置路径最小和）+自身路径数。

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) 
    {
        int row=grid.size();
        int col=grid[0].size();
        vector<vector<int>> dp(row,vector<int>(col));
        dp[0][0]=grid[0][0];
        for(int i=1;i<col;i++) dp[0][i]=dp[0][i-1]+grid[0][i];//处理第一行
        for(int i=1;i<row;i++) dp[i][0]=dp[i-1][0]+grid[i][0];//处理第一列
        for(int i=1;i<row;i++)
        {
            for(int j=1;j<col;j++)
            {
                dp[i][j]=min(dp[i-1][j],dp[i][j-1])+grid[i][j];
            }
        }
        return dp[row-1][col-1];
    }
};